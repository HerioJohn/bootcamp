There are 4 concept of OOC (Object Oriented Concepts 物件導向)

1. Inheritance
2. Encapsulation
3. Abstraction
4. Polymorphism

Inheritance（繼承）：

繼承是指一個類別（子類別）可以繼承另一個類別（父類別）的特性和行為。
透過繼承，子類別可以獲得父類別的屬性和方法，並可以進一步擴展或修改它們。
繼承支援程式碼重用，可以避免重複撰寫相同的程式碼。
繼承還提供了層次化的結構和多態性的基礎。

Encapsulation（封裝）：

封裝是物件導向程式設計的基礎概念之一。
它將相關的資料（屬性）和行為（方法）打包在一個單一實體（類別）中。
封裝可以控制資料的存取權限，只允許特定的方法訪問和修改資料，同時隱藏實作的細節。
封裝提供了資料隱私和程式碼模組化的好處，並可以避免對資料的直接存取和修改。

Abstraction（抽象）：

抽象是將複雜系統或物件的關鍵特性和行為抽象化的過程。
透過抽象，我們可以專注於關注點的高層次描述，忽略不必要的細節。
抽象可以使用抽象類別或介面來實現，它們定義了一組方法的簽名而不包含具體的實作。
抽象提供了程式碼重用、模組化和更高層次的設計的好處，同時也有助於降低程式的複雜度。

Polymorphism（多態性）：

多態性是指同一個方法可以在不同的物件上呈現不同的行為。
多態性可以通過繼承和抽象來實現。
多態性使得可以使用父類別或介面的引用來操作子類別的物件，而不需要關心具體的子類別。
多態性提供了靈活性和可擴展性，並支援程式碼的通用性。